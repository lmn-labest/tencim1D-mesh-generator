[project]
name = "tencim1d-mesh-generator"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "Henrique C. C. de Andrade", email = "henrique.ccda@gmail.com" }
]
requires-python = ">= 3.12, < 3.14"
dependencies = []

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "ipdb>=0.13.13",
    "mypy>=1.17.0",
    "ruff>=0.12.4",
    "taskipy>=1.14.1",
]
test = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
]

[tool.ruff]

line-length = 120

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint]

select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
pretty = true

[tool.taskipy.tasks]

pre_fmt = {cmd="uv run ruff check src tests --fix"}

fmt = {cmd="uv run ruff format src tests", help="Formatador do código."}

lin_ruff = {cmd="uv run ruff check src tests", help="Linter com o Ruff."}

lin_mypy = {cmd="uv run mypy --package tests --package tencim1d_mesh_generator", help="Analisador estático de tipos."}

linter = {cmd="task lin_ruff && task lin_mypy", help="Linter."}

tests = {cmd="uv run pytest --cov=tencim1d_mesh_generator", help="Rodando os testes."}
tests_report = {cmd="uv run pytest --cov-report html --cov=tencim1d_mesh_generator", help="Rodando os testes com cobertura."}

[tool.pytest.ini_options]
addopts = "-ra -vv --strict-markers --disable-warnings"
testpaths = [
    "tests",
]
